import hashlib
from base64 import b64decode
from binascii import hexlify

from rest_framework import serializers

from exceptions import RpmOrderMandatoryElementMissingEidException, RpmOrderUnknownEidException, \
    RpmOrderMatchingIdInvalidException, RpmOrderMatchingIdAlreadyIsUseException, \
    RpmOrderInvalidProfileOwnerOIDException, RpmOrderConditionalElementMissingICCIDException, \
    RpmOrderICCIDIsUnknownException, RpmOrderConditionalElementMissingUpdateMetadataRequestException
from utils import RpmCommandName
from models import Profile, HandleNotifyState
from rsp_22_v3 import RSPDefinitions


class RpmOrderRequestSerializer(serializers.Serializer):
    eid = serializers.CharField(max_length=32, min_length=32, help_text="Identification of the target eUICC.")
    rpmScript = serializers.CharField(help_text="RpmPackage as defined in section 2.10.1. SGP22-v3")
    matchingId = serializers.CharField(
        required=False, help_text="The MatchingID as defined in section 3.7.1 SGP22-v3, when generated by the Operator."
    )
    rootSmdsAddress = serializers.CharField(
        required=False, help_text="The Root SM-DS address to be to be used for the Event Registration."
    )
    altSmdsAddress = serializers.CharField(
        required=False, help_text="The Alternative SM-DS address to be used for cascaded Event Registration."
    )

    def _get_profile(self, eid):
        profile = Profile.objects.using(self.context.get('tenant_name')).filter(linked_eid=eid).first()
        return profile

    def _validate_eid(self, eid):
        is_profile_exists = self._get_profile(eid)
        if not is_profile_exists:
            raise RpmOrderMandatoryElementMissingEidException()
        if is_profile_exists.handle_notify_state != HandleNotifyState.ENABLED:
            raise RpmOrderUnknownEidException()
        return is_profile_exists

    @staticmethod
    def _validate_matchingId(profile, matching_id):
        if matching_id and not Profile.check_matching_id(matching_id):
            raise RpmOrderMatchingIdInvalidException()
        if matching_id:
            matching_id_hashed = hashlib.sha256(bytearray.fromhex(hexlify(matching_id.encode()).decode())).hexdigest()
            if profile.matching_id_hashed == matching_id_hashed:
                raise RpmOrderMatchingIdAlreadyIsUseException()
        if not matching_id:
            return Profile.generate_matching_id()

    @staticmethod
    def _validate_rpmScript(profile, rpmScript):
        """
            The SM-DP+ SHALL generate an RPM Package upon the request of Operator.
            The RPM Package SHALL be encoded in the ASN.1 data object as shown below.
        """
        RSPDefinitions.RpmPackage.from_der(b64decode(rpmScript))
        # List of RPM Command
        rpm_script = RSPDefinitions.RpmPackage.to_json()

        for rpm_command in rpm_script:
            continue_on_failure = rpm_command.get('continueOnFailure', False)
            rpm_command_details = rpm_command.get('rpmCommandDetails')

            # Command Details
            rpm_command_identifier = rpm_command_details[0]
            rpm_command_content = rpm_command_details[1]

            # verify that the function caller correctly presented its Profile
            # Owner OID in the RPM Command. If not, the SM-DP+ SHALL return a status
            # code "Profile Owner - Invalid Association".
            if rpm_command_identifier == RpmCommandName.LIST_PROFILE_INFO:
                searchCriteria = rpm_command_content.get('searchCriteria')
                if 'profileOwnerOid' in searchCriteria:
                    for index, value in enumerate(searchCriteria):
                        if value == 'profileOwnerOid':
                            profileOwnerOid = searchCriteria[index+1]
                            # verify that the function caller correctly presented its ProfileOwnerOID in the RPM Command
                            # If not, the SM-DP+ SHALL return a status code "Profile Owner - Invalid Association".
                            if not profile.owner.oid == profileOwnerOid:
                                raise RpmOrderInvalidProfileOwnerOIDException()
            elif rpm_command_identifier == RpmCommandName.UPDATE_METADATA:
                if not rpm_command_content.get('updateMetadataRequest'):
                    raise RpmOrderConditionalElementMissingUpdateMetadataRequestException()
            else:
                iccid = rpm_command_content.get('iccid')
                if not iccid:
                    raise RpmOrderConditionalElementMissingICCIDException()
                if profile.iccid != iccid:
                    raise RpmOrderICCIDIsUnknownException()

    def validate(self, data):
        profile = self._validate_eid(data.get('eid'))
        self._validate_matchingId(profile, data.get('matchingId'))
        self._validate_rpmScript(profile, data.get('rpmScript'))
        return data


class RpmOrderResponseSerializer(serializers.Serializer):
    header = serializers.DictField()
    matchingId = serializers.CharField(
        help_text="The MatchingID as defined in section 3.7.1 SGP22-v3, when generated by the Operator."
    )
